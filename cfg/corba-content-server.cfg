################################################################## 
# smartmet-tools-grid : corbaContentServer
##################################################################

# This is a configuration file used by the "corbaContentServer"
# program. The current program offers a CORBA based access to
# the content information.

# Notice that there might be several different configuration files
# for the current program, because it can be run in different modes
# and it can use different data sources. For example, it can
# be:

#    1. a caching content server that gets the original content
#       information from from another content server. This kind
#       of caching makes content queries extreme fast.

#    2. a protocol converter that converts CORBA requests into
#       another protocol (=> HTTP, Redis) and responses back
#       to CORBA.
#
#    3. a memory/file based information storage that keeps 
#       content information in its internal memory structures.
#       It can save information time to time in order to enable
#       faster startups. This implementation does not need any
#       external database (like Redis). On the other hand, it
#       can fetch information as fast as the cache implementation.

##################################################################


# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file. 
  
@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "$(HOME)/workspace/smartmet-tools-grid/cfg/smartmet-dev-env.cfg"
@endif


# This information is needed for initializing the grid-library. 

smartmet.library.grid-files.configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"


smartmet :
{
tools :
{
grid :
{


content-server :
{ 
  # The address and the port where the CORBA server will be running.
  
  address = "$(CORBA_CONTENT_SERVER_ADDRESS)"
  port    = "$(CORBA_CONTENT_SERVER_PORT)"
   
  cache :
  {
    enabled = true
    
    
    # Should the get requests be forwarded to the original content source when the cache update is in progress 
    requestForwardEnabled = false   
    
    
    # Size of the event list. If there are no event listeners then this
    # size can be very small. Otherwise it should be quite big (1000000 - 5000000) 
    
    eventListMaxSize = 3000000   
  }
  
   
  # Write the service IOR to the file
  
  iorFile = "/dev/stdout"
   


  content-source  : 
  {
    # Content source type (redis/corba/http/memory)
    
    type = redis

    redis :
    {
      address      = "$(REDIS_CONTENT_SERVER_ADDRESS)"
      port         = $(REDIS_CONTENT_SERVER_PORT)
      tablePrefix  = "$(REDIS_CONTENT_SERVER_TABLE_PREFIX)"
    }
    
    corba :
    {
      ior          = ""
    }

    http :
    {
      url          = "$(HTTP_CONTENT_SERVER_URL)"
    }
    
    memory :
    {
      # This selection means in practice that a memory-based contentServer is embedded into the corba server.
      # It can get its content information from CSV-files that can be found from the "contentDir". Its content
      # information can be also updated via its service interface. In this case it can store this information 
      # into the same directory. If the content sync is enabled then it monitors the state of the CSV-files 
      # and automatically updates changes into its memory structures. In this case it assumes that it gets all 
      # content information changes via these CSV-files.  

      contentLoadEnabled  = true;
      contentSyncEnabled  = true;
      contentSaveEnabled  = false;
      contentDir          = "$(HOME)/Data"
      contentSaveInterval = 60
      
      # Size of the event list. If there are no event listeners then this
      # size can be very small. Otherwise it should be quite big (1000000 - 5000000) 
    
      eventListMaxSize = 3000000          
    }    
  }
  
  processing-log :
  {
    enabled      = false    
    file         = "/dev/stdout"
#     file         = "$(GRID_TOOLS_LOG_DIR)/corbaContentServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#     file         = "$(GRID_TOOLS_LOG_DIR)/corbaContentServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}


}
}
}
