################################################################## 
# smartmet-tools-grid : corbaDataServer
##################################################################

# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file. 

@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "$(HOME)/workspace/smartmet-tools-grid/cfg/smartmet-dev-env.cfg"
@endif


smartmet :
{
library :
{

grid-files :
{
  # Processing of grid/grib files requires a lot of configuration information. 
  # This information should be found from the file below. 

  configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"
  
  # Are we using our own memoryMapper implementation. If "premapEnabled" is "true" then
  # the whole grid is preloaded when it is first time accessed. Otherwise only the requested
  # memory page is mapped. The point is that we can load data in small pieces when it requsted
  # or bigger pieces so that the number of the download requests will be smaller. 
  
  memoryMapper :
  {
    enabled = false
    accessFile = ""
    premapEnabled = true;
  }

  # If the data server is local then the grid file cache can be used to improve
  # performance. This cache is used caching uncompressed grid data. When the cache 
  # is full then the oldest data is automatically removed. The cache type can be
  # "memory" or "filesys". If the type is "filesys" then cached grids are stored
  # into files and these files are memory mapped. 
    
  cache :
  {
    type                = "filesys"
    directory           = "/home/koskelam/Disk/Cache"
    numOfGrids          = 50000
    maxSizeInMegaBytes  = 30000   
  }
}

} # library


tools :
{
grid :
{

data-server :
{
  # Server identification. This is used for the server registration.

  name = "data-server-1"
  id   = 1
  
  # The address and the port where the CORBA server will be running.
  
  address = "$(CORBA_DATA_SERVER_ADDRESS)"
  port    = "$(CORBA_DATA_SERVER_PORT)"

  # Write the service IOR to the file. This is needed when the service is called by a client.
  
  iorFile = "/dev/stdout"


  content-source :
  {
    ######  The remote content server IOR. Notice that the remote content server has its own configuration file.
  
    ior     = "$(CORBA_CONTENT_SERVER_IOR)"
  }


  grid-storage : 
  {
    directory = "$(GRID_FILE_STORAGE_DIR)"  
    memoryMapCheckEnabled = true
    preloadEnabled = false 
    preloadFile = "%(DIR)/preload.csv" 
    preloadMemoryLock = false
  }


  # The data server can generate "virtual grid files" that are based on
  # existing grid files. The definition file is used in order to define
  # requirements (= required parameters) and rules (= LUA function) for 
  # new virtual files.  
       
  virtualFiles :
  {
    enabled = false
    definitionFile = "$(GRID_ENGINE_CONFIG_DIR)/vff_convert.csv"
  }
    
  # LUA files are usually needed for generating content for the virtual
  # files. In practice, each virtual file definition contains the name
  # of the LUA function that needs to be called when the data of 
  # the current virtual file is requested.
  
  luaFiles = 
  [
    "$(GRID_ENGINE_CONFIG_DIR)/vff_convert.lua"
  ];


  processing-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#    file         = "$(GRID_TOOLS_LOG_DIR)/dataServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#    file         = "$(GRID_TOOLS_LOG_DIR)/dataServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }  
}



}
}
}
