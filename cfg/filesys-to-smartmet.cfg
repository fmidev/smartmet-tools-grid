################################################################## 
# smartmet-tools-grid : filesys2smartmet
##################################################################

# This is a configuration file for "filesys2smartmet" program. 
# The program is used for synchronizing content information 
# in the Redis database according to the information stored 
# into the file system. 

##################################################################


# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file. 

@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "$(HOME)/workspace/smartmet-tools-grid/cfg/smartmet-dev-env.cfg"
@endif



# This information is needed for initializing the grid-library. 

smartmet.library.grid-files.configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"



smartmet :
{
tools :
{
grid :
{


filesys2smartmet :
{ 
  content-source : 
  { 
    # There might be different content sources that update information
    # in the content server. That's why they should have an unique identifier.
    
    source-id = 200
    
    # The following server information is added into the registered content information.
    # SmartMet Server tries to fetch grid data from this server. The ideas is that
    # the grid data can be located in a different server than SmartMet Server itself
    # (requires RedHat 8). The access method of the data is defined here. Notice, that 
    # in spite of that SmartMet Server can fetch data from S3/Httpd, filesys2smartmet 
    # cannot. I.e. it can only scan files found from the file system.
    
    # Server address and possible port:       
    server = "127.0.0.1:8080"

    # Server type (1 = Filesys, 2 = S3, 4 = WebServer with range support)
    serverType = 1

    # Protocol (0 = None, 1 = HTTP, 2 = HTTPS)   
    protocol = 0
    
        
    # This file contains producer information that is needed when content information
    # is read from the filesys. Notice that this file might contain producer definitions
    # that are not necessary used during the update.
    
    producerDefFile = "$(GRID_TOOLS_CONFIG_DIR)/producerDef.csv"
  
    directories = 
    [
      "/home/koskelam/Disk/Harvester"
    ]

    patterns = 
    [
      "*.grib",
      "*.grib1",
      "*.grib2",
      "*grib_sfx",
      "*.nc",
      "*.sqd"      
    ]
    
    # Grib filenames should be in a fixed format (PROD_YYYYMMDDTHHMMSS_XXXXX.grib) . If this is 
    # not the case then we should call the LUA function, which returns the fixed filename that 
    # contains the required information. The filename itself is not changed. 
    
    filenameFixer : 
    {
      luaFilename = "%(DIR)/filenameFixer.lua"
      luaFunction = "fixFilename"
    }
    
    # Meta information scanned from the grid files is cached into separate files so that this information    
    # can be re-used when the Content Storage is re-filled. 
    
    cacheDir = "/tmp"        
  }  


  # The "addFileInfoListWithContent" message can contain max this many records:

  maxMessageSize = 5000

  content-storage  : 
  {
    # Content storage type (redis/corba/http)
    
    type = "redis"

    redis :
    {
      address      = "$(REDIS_CONTENT_SERVER_ADDRESS)"
      port         = $(REDIS_CONTENT_SERVER_PORT)
      tablePrefix  = "$(REDIS_CONTENT_SERVER_TABLE_PREFIX)"
    }
    
    corba :
    {
      ior          = "$(CORBA_CONTENT_SERVER_IOR)"
    }

    http :
    {
      url          = "$(HTTP_CONTENT_SERVER_URL)"
    }    
  }
  
  processing-log :
  {
    enabled      = true
    file         = "/dev/stdout"
#    file         = "$(GRID_TOOLS_LOG_DIR)/filesys2smartmet_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }

  debug-log :
  {
    enabled      = true
#    file         = "/dev/stdout"
    file         = "$(GRID_TOOLS_LOG_DIR)/filesys2smartmet_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
    
}


}
}
}
