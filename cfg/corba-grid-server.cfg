################################################################## 
# smartmet-tools-grid : corbaGridServer
##################################################################


# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file. 
  
@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "$(HOME)/workspace/smartmet-tools-grid/cfg/smartmet-dev-env.cfg"
@endif




smartmet :
{
library :
{

grid-files :
{
  # Processing of grid/grib files requires a lot of configuration information. 
  # This information should be found from the file below. 

  configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"
  
  # Are we using our own memoryMapper implementation. If "premapEnabled" is "true" then
  # the whole grid is preloaded when it is first time accessed. Otherwise only the requested
  # memory page is mapped. The point is that we can load data in small pieces when it requsted
  # or bigger pieces so that the number of the download requests will be smaller. 
  
  memoryMapper :
  {
    enabled = false
    accessFile = ""
    premapEnabled = true;
  }

  # If the data server is local then the grid file cache can be used to improve
  # performance. This cache is used caching uncompressed grid data. When the cache 
  # is full then the oldest data is automatically removed. The cache type can be
  # "memory" or "filesys". If the type is "filesys" then cached grids are stored
  # into files and these files are memory mapped. 
    
  cache :
  {
    type                = "filesys"
    directory           = "/home/koskelam/Disk/Cache"
    numOfGrids          = 50000
    maxSizeInMegaBytes  = 30000   
  }
}

} # library


tools :
{
grid :
{

corba-server :
{ 
  # The address and the port where the CORBA server will be running.
  
  address = "$(CORBA_CONTENT_SERVER_ADDRESS)"
  port    = "$(CORBA_CONTENT_SERVER_PORT)"
}



# The content server defines the source of the content information. Usually the master 
# content source is the Redis database. However,it can be also a memory-based content
# server or a caching content server, which are accessed by HTTP or CORBA.

# The Redis database is not usually fast enough for our searching purposes. That's why 
# its information is usally cached locally into the memory. In this case the content 
# information can be sorted so that it can be fetched very fast. In spite of that we
# can sort the current content information in many ways, we should not sort it all
# possible ways because this increases the memory consumtion and it also makes content
# updates slower. In practice, we should select the main content identifiers and sort
# the content information according to them. All the other information should be mapped
# to those identifiers when querying content information.

# If the content source itself is a caching content server then there is usually no need to 
# locally cache the same information. Caching content information makes content searching very 
# fast but it might required a lot of memory. That's why it usually makes sense to use a remote 
# caching server if that is possible. On the other hand this means that the grid engine can start 
# much faster because it does not need to cache content information first.

content-server :
{    
  # Write the service IOR to the file
  
  iorFile = "/dev/stdout"


  content-source : 
  {
    # Content source type (redis/postgresql/corba/http)

    type = "redis"

    redis :
    {
      address      = "$(REDIS_CONTENT_SERVER_ADDRESS)"
      port         = $(REDIS_CONTENT_SERVER_PORT)
      tablePrefix  = "$(REDIS_CONTENT_SERVER_TABLE_PREFIX)"
    }

    
    postgresql :
    {
      primaryConnectionString = "$(PG_CONTENT_SERVER_PRIMARY_CONNECTION_STRING)"
      secondaryConnectionString = "$(PG_CONTENT_SERVER_SECONDARY_CONNECTION_STRING)"
    }    


    corba :
    {
      ior          = "$(CORBA_CONTENT_SERVER_IOR)"
    }


    http :
    {
      url          = "$(HTTP_CONTENT_SERVER_URL)"
    }
  }


  ######  The local (caching) content server. 

  cache :
  {
    enabled = true
       
    # Should the get requests be forwarded to the original content source when the cache update is in progress 
    requestForwardEnabled = false   

    # Size of the event list. If there are no event listeners then this
    # size can be very small. Otherwise it should be quite big (1000000 - 5000000) 
    
    eventListMaxSize = 300000   
  }
 
  
  processing-log :
  {
    enabled      = false
    file         = "/tmp/contentServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "/tmp/contentServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
}



# The data server is responsible for fetching actual data from the grid files. It is possible
# to use a local or a remote data server. The data server uses also a lot of memory and maps
# grid files into virtual memory. That's why it would be smarter to use shared data servers
# when possible. On the other hand, the remote data server is usually always up and running
# which means that it can be used immediately. If the data server is local then it
# takes some time to start the system and make sure that all grid files are available.
# If the remote data server is disabled then the local data server is used in the engine.

data-server :
{  
  # Write the service IOR to the file
  
  iorFile = "/dev/stdout"

 
  # Location of grid files.

  grid-storage : 
  {
    directory = ""  
    memoryMapCheckEnabled = true
    preloadEnabled = false
    preloadFile = "%(GRID_ENGINE_CONFIG_DIR)/preload.csv" 
    preloadMemoryLock = false
    counterFile = "%(GRID_ENGINE_CONFIG_DIR)/requestCounters.csv" 
  }

    
  # The data server can generate "virtual grid files" that are based on
  # existing grid files. The definition file is used in order to define
  # requirements (= required parameters) and rules (= LUA function) for 
  # new virtual files.  
       
  virtualFiles :
  {
    enabled = false
    definitionFile = "%(GRID_ENGINE_CONFIG_DIR)/vff_convert.csv"
  }
  
  # LUA files are usually needed for generating content for the virtual
  # files. In practice, each virtual file definition contains the name
  # of the LUA function that needs to be called when the data of 
  # the current virtual file is requested.
  
  luaFiles = 
  [
    "%(GRID_ENGINE_CONFIG_DIR)/vff_convert.lua"
  ];

  processing-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#    file         = "/tmp/dataServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "/dev/stdout"
#    file         = "/tmp/dataServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}


# The query server is responsible for making data queries to the data server according
# to the content information that it gets from the content server. Also the query server
# can be local or remote. Sometimes it is smarter to locate the query server closer to 
# the content server and the data server, because there might be a lot traffic between them.
# If the remote query server is disabled then the local query server is used in the engine.

query-server :
{
  # Write the service IOR to the file
  
  iorFile = "/dev/stdout"


  # If you want to search data from a certain producer then this producer must be listed in 
  # this file. On the other hand, this file defines the search order of the producers and geometries 
  # in the case of that the producer or the geometry is not defined.  
  
  producerFile = "$(GRID_ENGINE_PRODUCER_FILE)"
  
  # The producer alias files are used for mapping newbase producers and parameters to the correct
  # grib producers, gemetries and level types. 
  
  producerAliasFiles = 
  [
    "%(GRID_ENGINE_CONFIG_DIR)/pm_ecmwf_eurooppa_mallipinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_ecmwf_eurooppa_painepinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_ecmwf_eurooppa_pinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_ecmwf_europe_probability.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_ecmwf_maailma_mallipinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_ecmwf_maailma_painepinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_ecmwf_maailma_pinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_gfs.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_harmonie_scandinavia_surface.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_hirlam.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_hirlam_mallipinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_hirlam_painepinta.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_pal_skandinavia.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/pm_smartmet_nowcast_scandinavia_surface.cfg"    
  ];
   
  # If the gridEngine notices that there are not valid mappings available for all
  # parameters found from the contentServer, then it automatically adds these unmapped
  # parameters to the following files. The queryServer needs these mappings in order to
  # find the current parameters. You can move these automatically generated mappings into
  # a more permanent mapping file (mappings_fmi_auto.csv => mappings_fmi.csv). On the other
  # hand, when the permanent mapping files are empty then you can get your basic mapping
  # settings from these automatically generated files (i.e. when you are first time 
  # configuring your system).
  
  
  # 1 = FMI_ID, 2 = FMI_NAME, 3 = GRIB_ID, 4 = NEWBASE_ID, 5 = NEWBASE_NAME
  
  mappingTargetKeyType = 2 
    
  mappingUpdateFile :
  {
    fmi     = "%(GRID_ENGINE_CONFIG_DIR)/mapping_fmi_auto.csv"
    newbase = "%(GRID_ENGINE_CONFIG_DIR)/mapping_newbase_auto.csv"
  }
  
  luaFiles = 
  [
    "%(GRID_ENGINE_CONFIG_DIR)/function_basic.lua",
    "%(GRID_ENGINE_CONFIG_DIR)/function_interpolation.lua",
    "%(GRID_ENGINE_CONFIG_DIR)/function_conversion.lua",
    "%(GRID_ENGINE_CONFIG_DIR)/function_newbase.lua",
    "%(GRID_ENGINE_CONFIG_DIR)/function_demo.lua"
  ];
  
  mappingFiles =
  [
    "%(GRID_ENGINE_CONFIG_DIR)/mapping_fmi.csv",
    "%(GRID_ENGINE_CONFIG_DIR)/mapping_fmi_auto.csv",
    "%(GRID_ENGINE_CONFIG_DIR)/mapping_newbase.csv",
    "%(GRID_ENGINE_CONFIG_DIR)/mapping_newbase_auto.csv",
    "%(GRID_ENGINE_CONFIG_DIR)/mapping_virtual.csv"
  ];

  aliasFiles =
  [
    "%(GRID_ENGINE_CONFIG_DIR)/alias_demo.cfg",
    "%(GRID_ENGINE_CONFIG_DIR)/alias_newbase_extension.cfg"
  ];

  processing-log :
  {
    enabled      = false
#    file         = "/dev/stdout"
    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_processing.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
  
  debug-log :
  {
    enabled      = false
    file         = "$(GRID_ENGINE_LOG_DIR)/queryServer_debug.log"
    maxSize      = 100000000
    truncateSize = 20000000
  }
}

}
}
}
